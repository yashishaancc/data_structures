#include<iostream>#include<string>#include<vector>using namespace std;int min_ops(string s1, string s2, int b1, int e1, int b2, int e2){	static int count_calls = 0;	count_calls++;	// cout << "min_ops called: " << count_calls << endl;	if(b1 > e1)return e2-b2+1;	if(b2 > e2)return e1-b1+1;	if(s1[b1] == s2[b2])return min_ops(s1, s2, b1+1, e1, b2+1, e2);	int replace = min_ops(s1, s2, b1+1, e1, b2+1, e2);	int insert = min_ops(s1, s2, b1, e1, b2+1, e2);	int remove = min_ops(s1, s2, b1+1, e1, b2, e2);	string op = (replace > insert) ? 				(insert > remove) ? "removing" : "inserting" : "replacing";	printf("b1:%d, e1:%d, b2:%d, e2:%d, %s\n", b1, e1, b2, e2, op.c_str());	return 1+min(min(replace, insert), remove);}int minOpsDP(vector<vector<int>> arr, string s1, string s2, int e1, int e2){	static int count_calls = 0;	count_calls++;	// cout << "minOpsDP called: , e1, e2: " 	// 	 << count_calls << " " << e1 << " " << e2 << endl;	int replace, insert, remove;	if(e1 < 0)return e2+1;	if(e2 < 0)return e1+1;	if(s1[e1] == s2[e2]){		// cout << "HI e1, e2: " << e1 << " " << e2 << endl;		arr[e2][e1] = (e1-1 >= 0 && e2-1 >= 0 && arr[e2-1][e1-1] != -1) ? 				arr[e2-1][e1-1] : minOpsDP(arr, s1, s2, e1-1, e2-1);		// cout << "HELLO e1, e2: " << e1 << " "  << e2 << endl;		return arr[e2][e1];	}	replace = (e1-1 >= 0 && e2-1 >= 0 && arr[e2-1][e1-1] != -1) ? 				arr[e2-1][e1-1] : minOpsDP(arr, s1, s2, e1-1, e2-1);	insert = (e1 >= 0 && e2-1 >= 0 && arr[e2-1][e1] != -1) ? 				arr[e2-1][e1] : minOpsDP(arr, s1, s2, e1, e2-1);	remove = (e1-1 >= 0 && e2 >= 0 && arr[e2][e1-1] != -1) ? 				arr[e2][e1-1] : minOpsDP(arr, s1, s2, e1-1, e2);	// string op = (replace > insert) ? 	// 			(insert > remove) ? "removing" : "inserting" : "replacing";	// printf("e1:%d, e2:%d, %s, replace: %d, insert: %d, remove: %d\n"	// 	, e1, e2, op.c_str(), replace, insert, remove);	arr[e2][e1] = 1+min(min(replace, insert), remove);	return arr[e2][e1];}int minOpsItr(string s1, string s2, int n1, int n2){	int i, j, arr[2][n2+1];	for(i = 0; i <= n1; i++){		for(j = 0; j <= n2; j++){			if(i == 0)arr[1][j] = j;			else if(j == 0)arr[1][j] = i;			else if(s1[i-1] == s2[j-1])arr[1][j] = arr[0][j-1];			else{				int Min = min(min(arr[0][j], arr[1][j-1]), arr[0][j-1]);				arr[1][j] = 1+Min;			}			printf("%3d", arr[1][j]);		}		cout << endl;		for(j = 0; j <= n2; j++)arr[0][j] = arr[1][j];	}	return arr[1][n2];}int main(){	string s1, s2;	cout << "Enter 1st string: ";	cin >> s1;	cout << "Enter 2nd string: ";	cin >> s2;	cout << s1 << endl << s2 << endl;	cout << s1.size() << endl << s2.size() << endl;	int n1 = s1.size(), n2 = s2.size();	vector<vector<int>> arr(n2, vector<int>(n1, -1));	// for(int i = 0; i < n2; i++)for(int j = 0; j < n1; j++)cout << arr[i][j];	// int m = min_ops(s1, s2, 0, n1-1, 0, n2-1);	// int m = minOpsDP(arr, s1, s2, n1-1, n2-1);	int m = minOpsItr(s1,s2,n1,n2);	cout << "Minimum number of operations required "		 << "to convert 1st string into 2nd string are: ";	cout << m << endl;	return 0;}